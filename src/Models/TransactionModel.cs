/***
 * Lockstep Platform SDK for C#
 *
 * (c) 2021-2023 Lockstep, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author     Lockstep Network <support@lockstep.io>
 * @copyright  2021-2023 Lockstep, Inc.
 * @link       https://github.com/Lockstep-Network/lockstep-sdk-csharp
 */



#pragma warning disable CS8618

using System;

namespace LockstepSDK.Models
{

    /// <summary>
    /// Represents detailed transaction information which represents either Invoices, Credit Memos or Payments
    /// within the group account.
    /// </summary>
    public class TransactionModel
    {

        /// <summary>
        /// Group account transaction is associated with.
        /// </summary>
        public Guid? GroupKey { get; set; }

        /// <summary>
        /// The base currency code of the group.
        /// </summary>
        public string BaseCurrencyCode { get; set; }

        /// <summary>
        /// An additional reference number that is sometimes used to identify a transaction.
        /// The meaning of this field is specific to the ERP or accounting system used by the user.
        /// </summary>
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The unique ID of the transaction record.
        /// </summary>
        public Guid? TransactionId { get; set; }

        /// <summary>
        /// The status of the transaction record.
        ///
        /// Recognized Invoice status codes are:
        /// * `Open` - Represents an invoice that is considered open and needs more work to complete
        /// * `Closed` - Represents an invoice that is considered closed and resolved
        ///
        /// Recognized Payment status codes are:
        /// * `Open` - Represents an payment that includes some unassigned amount that has not yet been applied to an invoice
        /// * `Closed` - Represents an payment where `UnappliedAmount` will be zero
        /// </summary>
        public string TransactionStatus { get; set; }

        /// <summary>
        /// The type of the transaction record.
        ///
        /// Recognized Invoice types are:
        /// * `AR Invoice` - Represents an invoice sent by Company to the Customer
        /// * `AP Invoice` - Represents an invoice sent by Vendor to the Company
        /// * `AR Credit Memo` - Represents a credit memo generated by Company given to Customer
        /// * `AP Credit Memo` - Represents a credit memo generated by Vendor given to Company
        ///
        /// Recognized PaymentType values are:
        /// * `AR Payment` - A payment made by a Customer to the Company
        /// * `AP Payment` - A payment made by the Company to a Vendor
        /// </summary>
        public string TransactionType { get; set; }

        /// <summary>
        /// Additional type categorization of the transaction.
        /// </summary>
        public string TransactionSubType { get; set; }

        /// <summary>
        /// The date when a transaction record was reported.
        /// </summary>
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// The date when a transaction record is due for payment or completion.
        /// </summary>
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The amount of days past the due date the transaction is left un-closed.
        /// </summary>
        public int? DaysPastDue { get; set; }

        /// <summary>
        /// The currency code of the transaction.
        /// </summary>
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The total value of this transaction, inclusive or all taxes and line items.
        /// </summary>
        public decimal? TransactionAmount { get; set; }

        /// <summary>
        /// The remaining balance of this transaction.
        /// </summary>
        public decimal? OutstandingAmount { get; set; }

        /// <summary>
        /// The total value of this transaction, inclusive or all taxes and line items in the group&#39;s base currency.
        /// </summary>
        public decimal? BaseCurrencyTransactionAmount { get; set; }

        /// <summary>
        /// The remaining balance of this transaction in the group&#39;s base currency.
        /// </summary>
        public decimal? BaseCurrencyOutstandingAmount { get; set; }

        /// <summary>
        /// The count of items associated to the transaction.
        ///
        /// Examples:
        /// * Number of payments for an invoice.
        /// * Number of invoices a payment or credit memo is applied to.
        /// </summary>
        public int? TransactionDetailCount { get; set; }

        /// <summary>
        /// Specific transactions have support for pdf retrieval from their respective erp. When this flag is true, an additional
        /// call to Invoices/{id}/pdf or Payments/{id}/pdf can be made to retrieve a pdf directly from the erp.
        /// </summary>
        public bool? SupportsErpPdfRetrieval { get; set; }
    }
}
